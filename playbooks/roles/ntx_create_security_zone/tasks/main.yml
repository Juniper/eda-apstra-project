---
# Nutanix Create Security Zone Role
# Creates Apstra security zone when Nutanix virtual switch is created

- name: Print blueprint_name
  debug:
    msg: "{{ blueprint_name }}"

- name: Get blueprint name from ConfigMap
  kubernetes.core.k8s_info:
    api_version: v1
    kind: ConfigMap
    name: nutanix-eda-config
    namespace: default
  register: config_map_info

- name: Extract blueprint name from ConfigMap
  set_fact:
    blueprint_name: "{{ config_map_info.resources[0].data.BLUEPRINT_NAME }}"
  when: config_map_info.resources | length > 0

- name: Print blueprint_name from ConfigMap
  debug:
    msg: "Blueprint name from ConfigMap: {{ blueprint_name }}"

- name: Print Nutanix virtual switch event details
  debug:
    msg: 
      - "Event Type: {{ nutanix_event.event_type }}"
      - "Entity Type: {{ nutanix_event.entity_type }}"
      - "Timestamp: {{ nutanix_event.timestamp }}"
      - "API Version: {{ nutanix_event.api_version }}"
  when: nutanix_event is defined

- name: Check if this is a deletion event
  ansible.builtin.set_fact:
    is_deletion: "{{ nutanix_event.event_type == 'DELETED' }}"
  when: nutanix_event is defined

- name: Exit if this is a deletion event
  ansible.builtin.meta: end_play
  when: is_deletion | default(false)

- name: Extract virtual switch information from Nutanix event
  set_fact:
    vswitch_name: "{{ entity.name }}"
    vswitch_uuid: "{{ entity.uuid }}"
    vswitch_state: "{{ entity.state }}"
  when: 
    - nutanix_event is defined
    - entity is defined

- name: Debug extracted virtual switch information
  debug:
    msg: 
      - "Processing virtual switch creation event"
      - "Virtual Switch Name: {{ vswitch_name }}"
      - "Virtual Switch UUID: {{ vswitch_uuid }}"
      - "Virtual Switch State: {{ vswitch_state }}"
      - "Blueprint Name: {{ blueprint_name }}"
  when: vswitch_name is defined

- name: Generate security zone name from virtual switch
  ansible.builtin.set_fact:
    security_zone_name: "ntx-{{ vswitch_name | lower | regex_replace('[^a-z0-9]', '-') }}"
    vrf_name: "vrf-{{ vswitch_name | lower | regex_replace('[^a-z0-9]', '-') }}"
  when: vswitch_name is defined

- name: Create base VRF data structure for Nutanix virtual switch
  set_fact:
    vrf_data:
      label: "{{ security_zone_name }}"
      vrf_name: "{{ vrf_name }}"
      description: "Security zone for Nutanix virtual switch {{ vswitch_name }}"
  when: vswitch_name is defined

- name: Extract label directly using debug
  debug:
    msg: "{{ vrf_data }}"

- name: Form the body combining sz_type
  ansible.builtin.set_fact:
    vrf_data_with_sztype: >-
      {{
        vrf_data
        | combine({'sz_type': (vrf_data.sz_type if vrf_data.sz_type is defined else "evpn" )})
        | combine({'label': (vrf_data.label if vrf_data.label is defined else vrf_data.vrf_name)})
        | combine({'vrf_name': (vrf_data.vrf_name if vrf_data.vrf_name is defined else vrf_data.label)})
      }}

- name: Print vrf_data_with_sztype
  debug:
    msg: "{{ vrf_data_with_sztype }}"

- name: Set the blueprint name
  set_fact:
    bluprint_label_value: "{{ blueprint_name }}"

- name: Set sz_tags for Nutanix events
  set_fact:
    sz_tags: 
      - "vswitch_name={{ vswitch_name }}"
      - "vswitch_uuid={{ vswitch_uuid }}"
      - "source=nutanix_eda"
      - "entity_type=virtual_switch"
      - "event_type=created"
  when: vswitch_name is defined

- name: Connect to Apstra
  juniper.apstra.authenticate:
    verify_certificates: false
    logout: false
  register: auth

- block:
    - name: Get blueprint
      juniper.apstra.blueprint:
        body:
          label: "{{ bluprint_label_value }}"
        auth_token: "{{ auth.token }}"
        lock_state: "ignore"
      register: register_bp

    - name: Create tags if sz_tags is defined and is a list
      juniper.apstra.tag:
        id: "{{ register_bp.id }}"
        body:
          label: "{{ tag }}"
          description: "Nutanix EDA virtual switch tag"
        auth_token: "{{ auth.token }}"
      when: sz_tags is defined and sz_tags | length > 0
      loop: "{{ sz_tags }}"
      loop_control:
        loop_var: tag
      ignore_errors: true  # Tags may already exist

    - name: Create security_zone
      juniper.apstra.security_zone:
        id: "{{ register_bp.id }}"
        body: "{{ vrf_data_with_sztype }}"
        auth_token: "{{ auth.token }}"
        tags: "{{ sz_tags if sz_tags is not none else omit }}"
      register: sz

    - name: If changes are made, print changed
      debug:
        msg: "Security zone created successfully: {{ sz.changed }}"
      when: sz.changed

    - name: If changes are not made, print not changed
      debug:
        msg: "Security zone already exists: {{ sz }}"
      when: not sz.changed

  rescue:
    - name: Unlock the blueprint as task is failed
      juniper.apstra.blueprint:
        id: "{{ register_bp.id }}"
        lock_state: "unlocked"
        state: committed
        auth_token: "{{ auth.token }}"
      register: blueprint_commit
      ignore_errors: true

    - name: Debug failure information
      debug:
        msg: 
          - "Security zone creation failed for virtual switch: {{ vswitch_name }}"
          - "Error details will be in the task output above"

  always:
    - name: Unlock the blueprint
      juniper.apstra.blueprint:
        id: "{{ register_bp.id }}"
        lock_state: "unlocked"
        state: committed
        auth_token: "{{ auth.token }}"
      register: blueprint_unlock
      when: register_bp is defined

    - name: Commit the blueprint
      juniper.apstra.blueprint:
        id: "{{ register_bp.id }}"
        lock_state: "ignore"
        state: committed
        auth_token: "{{ auth.token }}"
      register: blueprint_commit
      when: register_bp is defined

    - name: Final status report
      debug:
        msg:
          - "=== Nutanix Virtual Switch Security Zone Creation Complete ==="
          - "Virtual Switch: {{ vswitch_name }}"
          - "Security Zone: {{ security_zone_name }}"
          - "VRF: {{ vrf_name }}"
          - "Blueprint: {{ blueprint_name }}"
          - "UUID: {{ vswitch_uuid | default('N/A') }}"
          - "Status: {{ 'Success' if (not sz.failed | default(false)) else 'Failed' }}"
      when: vswitch_name is defined
