---
# Assign individual interface connectivity template
- name: Set interface-specific variables for connectivity assignment
  set_fact:
    # Use current interface subnet_name as virtual network identifier
    vnet_label_value: "{{ interface.subnet_name }}"
    vswitch_name: "{{ interface.physical_connectivity.vswitch_name }}"
    # Create application point for this specific interface
    interface_application_points:
      - remote_host: "{{ interface.physical_connectivity.physical_switch | default('ntx-' + vm_host_name | regex_replace('[^a-zA-Z0-9]', '-') + '-switch') }}"
        if_name: "{{ interface.physical_connectivity.switch_port | default('eth-' + interface.nic_index | string) }}"
        used: true
    # Set connectivity tags for this interface
    connectivity_tags: 
      - "vm_name={{ vm_name }}"
      - "vm_uuid={{ vm_uuid }}"
      - "host_name={{ vm_host_name }}"
      - "subnet_name={{ interface.subnet_name }}"
      - "vswitch_name={{ interface.physical_connectivity.vswitch_name }}"
      - "nic_index={{ interface.nic_index }}"
      - "source_nutanix_eda"
      - "entity_type_vm"
      - "event_type_connectivity_assign"

- name: Get blueprint
  juniper.apstra.blueprint:
    body:
      label: "{{ bluprint_label_value }}"
    auth_token: "{{ auth.token }}"
    lock_state: "ignore"
  register: register_bp

- name: Debug blueprint information for connectivity assignment
  debug:
    msg: 
      - "Blueprint: {{ register_bp.id }}"
      - "Blueprint label: {{ bluprint_label_value }}"
      - "Assigning connectivity for virtual network: {{ interface.subnet_name }}"

- name: Check if virtual network exists using tags approach
  juniper.apstra.virtual_network:
    id: "{{ register_bp.id }}"
    auth_token: "{{ auth.token }}"
    tags: 
      - "ntx_subnet={{ interface.subnet_name }}"
      - "source=nutanix_eda"
    state: present
  register: vnet_check_by_tags
  ignore_errors: true
  check_mode: true

- name: Debug virtual network existence check
  debug:
    msg:
      - "=== VIRTUAL NETWORK EXISTENCE CHECK FOR CONNECTIVITY ASSIGNMENT ==="
      - "Searching for VNet with tags:"
      - "  - ntx_subnet={{ interface.subnet_name }}"
      - "  - source=nutanix_eda"
      - "Check result: {{ 'SUCCESS' if vnet_check_by_tags is succeeded else 'FAILED' }}"
      - "Error (if any): {{ vnet_check_by_tags.msg | default('No error') }}"
      - "Full response: {{ vnet_check_by_tags }}"

- name: Set virtual network existence based on tag search
  set_fact:
    vnet_exists: "{{ vnet_check_by_tags is succeeded }}"

- name: Create vnet_check compatible result
  set_fact:
    vnet_check:
      failed: "{{ not vnet_exists }}"
      msg: "{{ 'Virtual network found by tags' if vnet_exists else 'Virtual network not found by tags' }}"

- name: Debug virtual network check result
  debug:
    msg: 
      - "Blueprint ID: {{ register_bp.id }}"
      - "Searching for virtual network with ntx_subnet tag: '{{ interface.subnet_name }}'"
      - "Check result: {{ 'FOUND' if vnet_exists else 'NOT FOUND' }}"
      - "Check failed: {{ vnet_check.failed | default(false) }}"
      - "Tag search: {{ 'SUCCESS' if vnet_check_by_tags is succeeded else 'FAILED' }}"
      - "Search method: Tag-based using ntx_subnet and source=nutanix_eda tags"

- name: Skip interface if virtual network does not exist
  debug:
    msg: "Virtual network '{{ interface.subnet_name }}' does not exist in blueprint {{ register_bp.id }}. Continuing anyway..."
  when: vnet_check.failed | default(false)

- name: Process interface connectivity assignment (regardless of virtual network existence)
  block:
    - name: Create tags if connectivity_tags is defined and is a list
      juniper.apstra.tag:
        id: "{{ register_bp.id }}"
        body:
          label: "{{ tag }}"
          description: "Nutanix EDA VM connectivity assignment tag"
        auth_token: "{{ auth.token }}"
        state: present
      when: connectivity_tags is defined and connectivity_tags | length > 0
      loop: "{{ connectivity_tags }}"
      loop_control:
        loop_var: tag
      register: tag_creation_results
      ignore_errors: true  # Tags may already exist or API may have issues

    - name: Debug tag creation results
      debug:
        msg: "Tag creation completed. Some tags may have failed but will continue processing."
      when: connectivity_tags is defined and connectivity_tags | length > 0

    - name: Assign endpoint policy application points
      juniper.apstra.endpoint_policy:
        id: "{{ register_bp.id }}"
        virtual_network_label: "{{ vnet_label_value }}"
        tags: "{{ connectivity_tags if connectivity_tags is not none else omit }}"
        body:
          application_points: "{{ interface_application_points }}"
        state: present
      register: ep_update
      ignore_errors: true

    - name: Handle endpoint policy assignment if update failed
      juniper.apstra.endpoint_policy:
        id: "{{ register_bp.id }}"
        virtual_network_label: "{{ vnet_label_value }}"
        tags: "{{ connectivity_tags if connectivity_tags is not none else omit }}"
        body:
          application_points: "{{ interface_application_points }}"
        state: present
      register: ep_create
      when: ep_update.failed | default(false)

    - name: Set final endpoint policy result
      set_fact:
        ep_final_result: "{{ ep_create if (ep_update.failed | default(false)) else ep_update }}"

    - name: If endpoint policy changes are made, print success
      debug:
        msg: "Endpoint policy assigned successfully for interface {{ interface.nic_index }}: {{ ep_final_result.changed }}"
      when: ep_final_result.changed | default(false)

    - name: If endpoint policy changes are not made, print no change
      debug:
        msg: "Endpoint policy already assigned for interface {{ interface.nic_index }}: {{ ep_final_result }}"
      when: not (ep_final_result.changed | default(false))

    - name: Handle endpoint policy assignment failure
      debug:
        msg: 
          - "Failed to assign endpoint policy for virtual network: {{ vnet_label_value }}"
          - "Interface: {{ interface.nic_index }}"
          - "Error: {{ ep_final_result.msg | default('Unknown error') }}"
      when: ep_final_result.failed | default(false)

    # Update ConfigMap with VM connectivity information
    - name: Create ConfigMap name from subnet name
      set_fact:
        connectivity_configmap_name: "{{ vnet_label_value }}-connectivity"

    - name: Fetch or create connectivity ConfigMap
      kubernetes.core.k8s_info:
        kind: ConfigMap
        name: "{{ connectivity_configmap_name }}"
        namespace: juniper-apstra-eda
      register: connectivity_cm
      ignore_errors: true

    - name: Prepare VM connectivity data
      set_fact:
        vm_connectivity_key: "{{ vm_name }}-{{ vm_host_name | regex_replace('[^a-zA-Z0-9]', '_') }}-nic{{ interface.nic_index }}"
        vm_connectivity_data:
          vm_name: "{{ vm_name }}"
          vm_uuid: "{{ vm_uuid }}"
          host_name: "{{ vm_host_name }}"
          host_uuid: "{{ vm_host_uuid }}"
          power_state: "{{ vm_power_state }}"
          interface_info: 
            nic_index: "{{ interface.nic_index }}"
            ip_address: "{{ interface.ip_address }}"
            mac_address: "{{ interface.mac_address }}"
            subnet_name: "{{ interface.subnet_name }}"
            vswitch_name: "{{ interface.physical_connectivity.vswitch_name }}"
            host_port: "{{ interface.physical_connectivity.host_port }}"
            physical_switch: "{{ interface.physical_connectivity.physical_switch | default('ntx-' + vm_host_name | regex_replace('[^a-zA-Z0-9]', '-') + '-switch') }}"
            switch_port: "{{ interface.physical_connectivity.switch_port | default('eth-' + interface.nic_index | string) }}"
          application_points: "{{ interface_application_points }}"
          last_updated: "{{ nutanix_event.timestamp }}"

    - name: Initialize ConfigMap data if it doesn't exist
      set_fact:
        existing_cm_data: {}
      when: connectivity_cm.resources | length == 0

    - name: Get existing ConfigMap data if it exists
      set_fact:
        existing_cm_data: "{{ connectivity_cm.resources[0].data | default({}) }}"
      when: connectivity_cm.resources | length > 0

    - name: Update ConfigMap data with VM connectivity
      set_fact:
        updated_cm_data: "{{ existing_cm_data | combine({vm_connectivity_key: (vm_connectivity_data | to_nice_json)}) }}"

    - name: Create or update connectivity ConfigMap
      kubernetes.core.k8s:
        namespace: juniper-apstra-eda
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: "{{ connectivity_configmap_name }}"
            labels:
              managed-by: "nutanix-eda"
              subnet: "{{ vnet_label_value }}"
              vswitch: "{{ vswitch_name }}"
              interface: "nic{{ interface.nic_index }}"
          data: "{{ updated_cm_data }}"
        state: present
      register: cm_update

    - name: Debug ConfigMap update result
      debug:
        msg: "Connectivity ConfigMap updated for interface {{ interface.nic_index }}: {{ cm_update.changed }}"

    - name: Unlock the blueprint
      juniper.apstra.blueprint:
        id: "{{ register_bp.id }}"
        lock_state: "unlocked"
        state: committed
        auth_token: "{{ auth.token }}"
      register: blueprint_unlock
      when: register_bp is defined

    - name: Commit the blueprint
      juniper.apstra.blueprint:
        id: "{{ register_bp.id }}"
        lock_state: "ignore"
        state: committed
        auth_token: "{{ auth.token }}"
      register: blueprint_commit
      when: register_bp is defined

    - name: Final status report for interface connectivity assignment
      debug:
        msg:
          - "=== Nutanix VM Connectivity Template Assignment Complete ==="
          - "VM Name: {{ vm_name }}"
          - "Interface: {{ interface.nic_index }}"
          - "Subnet: {{ interface.subnet_name }}"
          - "Virtual Switch: {{ interface.physical_connectivity.vswitch_name }}"
          - "Application Points: {{ interface_application_points | length }}"
          - "Host: {{ vm_host_name }}"
          - "Blueprint: {{ blueprint_name }}"
          - "Status: {{ 'Success' if (not (ep_final_result.failed | default(false))) else 'Failed' }}"
      when: vm_name is defined

  rescue:
    - name: Unlock the blueprint as connectivity assignment task has failed
      juniper.apstra.blueprint:
        id: "{{ register_bp.id }}"
        lock_state: "unlocked"
        state: committed
        auth_token: "{{ auth.token }}"
      register: blueprint_unlock
      ignore_errors: true

    - name: Debug connectivity assignment failure information
      debug:
        msg: 
          - "VM connectivity template assignment failed for VM: {{ vm_name }}"
          - "Interface: {{ interface.nic_index }}"
          - "Error details will be in the task output above"